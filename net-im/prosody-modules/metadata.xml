<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
<maintainer>
 <email>mva@mva.name</email>
 <description>
	If you have any issues, please contact me, or try to find me in IRC on Freenode, OFTC or RusNet.
 </description>
 <name>Vadim A. Misbakh-Soloviov</name>
</maintainer>
<longdescription>Prosody IM server's community-writen modules</longdescription>
<use>
	<flag name='addressing'>This module is a partial implementation of <a href="http://xmpp.org/extensions/xep-0033.html">XEP-0033: Extended Stanza Addressing</a>. (info: https://modules.prosody.im/mod_addressing)</flag>
	<flag name='adhoc_account_management'>This module adds an ad-hoc command that lets an user change their password. This is useful for clients that don’t have support for <a href="http://xmpp.org/extensions/xep-0077.html">XEP-0077</a> style password changing. In the future, it may provide other account management commands. (info: https://modules.prosody.im/mod_adhoc_account_management)</flag>
	<flag name='adhoc_blacklist'>This module provides the <em>Edit Blacklist</em> ad-hoc command described in <a href="http://xmpp.org/extensions/xep-0133.html#edit-blacklist">XEP-0133</a> and also performs the actual blocking of incoming and outgoing server-to-server connections. (info: https://modules.prosody.im/mod_adhoc_blacklist)</flag>
	<flag name='adhoc_dataforms_demo'>This module adds an <a href="https://xmpp.org/extensions/xep-0050.html">Ad-Hoc command</a> with a demo <a href="https://xmpp.org/extensions/xep-0004.html">data form</a> that includes all kinds of fields. It’s meant to help debug both Prosodys <a href="https://prosody.im/doc/developers/util/dataforms"><code>util.dataforms</code></a> library and clients, eg seeing how various field types are rendered. (info: https://modules.prosody.im/mod_adhoc_dataforms_demo)</flag>
	<flag name='adhoc_groups'>This module lets you join groups using an ad-hoc command. When a user joins a group, everyone in the group is added to their roster, and they are added to the rosters of existing members. (info: https://modules.prosody.im/mod_adhoc_groups)</flag>
	<flag name='admin_blocklist'>This module uses the blocklists set by admins for blocking s2s connections. (info: https://modules.prosody.im/mod_admin_blocklist)</flag>
	<flag name='admin_message'>This module provides a console over XMPP. All the commands of the mod_admin_telnet module are available from an XMPP client. (info: https://modules.prosody.im/mod_admin_message)</flag>
	<flag name='admin_probe'>This module lets server administrators send <code>&lt;presence type=&quot;probe&quot;/&gt;</code> to any local user and receive their presence in response, bypassing roster checks. (info: https://modules.prosody.im/mod_admin_probe)</flag>
	<flag name='admin_web'>This module provides a basic web administration interface. It currently gives you access to Ad-Hoc commands on any virtual host or component that you are set as an administrator for in the Prosody config file. It also provides a live list of all S2S and C2S connections. (info: https://modules.prosody.im/mod_admin_web)</flag>
	<flag name='alias'>This module allows you to set up aliases that alert people who try to contact them or add them to their roster what your actual JID is. This is useful for changing JIDs, or just in the case where you own both example.com and example.net, and want people who contact you@example.com to be alerted to contact you at you@example.net instead. (info: https://modules.prosody.im/mod_alias)</flag>
	<flag name='atom'>No documentation yet :( (info: https://modules.prosody.im/mod_atom)</flag>
	<flag name='auth_any'>This module accepts any username and password, which can be useful for testing. (info: https://modules.prosody.im/mod_auth_any)</flag>
	<flag name='auth_ccert'>This module implements PKI-style client certificate authentication. You will therefore need your own Certificate Authority. How to set that up is beyond the current scope of this document. (info: https://modules.prosody.im/mod_auth_ccert)</flag>
	<flag name='auth_custom_http'>To authenticate users, this module does a <code>POST</code> request to a configured URL with a JSON payload. It is not async so requests block the server until answered. (info: https://modules.prosody.im/mod_auth_custom_http)</flag>
	<flag name='auth_dovecot'>This is a Prosody authentication plugin which uses Dovecot as the backend. (info: https://modules.prosody.im/mod_auth_dovecot)</flag>
	<flag name='auth_external'>Allow client authentication to be handled by an external script/process. (info: https://modules.prosody.im/mod_auth_external)</flag>
	<flag name='auth_ha1'>This module authenticates users against hashed credentials stored in a plain text file. The format is the same as that used by reTurnServer. (info: https://modules.prosody.im/mod_auth_ha1)</flag>
	<flag name='auth_http_async'>This is an experimental authentication module that does an asynchronous HTTP call to verify username and password. (info: https://modules.prosody.im/mod_auth_http_async)</flag>
	<flag name='auth_http_cookie'>This is an experimental authentication module that does an asynchronous HTTP call to verify username and password. (info: https://modules.prosody.im/mod_auth_http_cookie)</flag>
	<flag name='auth_imap'>This is a Prosody authentication plugin which uses a generic IMAP server as the backend. (info: https://modules.prosody.im/mod_auth_imap)</flag>
	<flag name='auth_internal_yubikey'>A <a href="http://www.yubico.com/yubikey">YubiKey</a> is a small USB one-time-password (OTP) generator. (info: https://modules.prosody.im/mod_auth_internal_yubikey)</flag>
	<flag name='auth_joomla'>This module allows you to authenticate against an Joomla database. (info: https://modules.prosody.im/mod_auth_joomla)</flag>
	<flag name='auth_ldap'>This is a Prosody authentication plugin which uses LDAP as the backend. (info: https://modules.prosody.im/mod_auth_ldap)</flag>
	<flag name='auth_ldap2'>See <a href="https://modules.prosody.im/mod_lib_ldap.html">mod_lib_ldap</a> for more information. (info: https://modules.prosody.im/mod_auth_ldap2)</flag>
	<flag name='auth_oauthbearer'>This is an authentication module for the SASL OAUTHBEARER mechanism, as provided by <code>mod_sasl_oauthbearer</code>. (info: https://modules.prosody.im/mod_auth_oauthbearer)</flag>
	<flag name='auth_pam'>This module makes Prosody authenticate users against PAM (Linux Pluggable Authentication Modules) (info: https://modules.prosody.im/mod_auth_pam)</flag>
	<flag name='auth_phpbb3'>This module allows you to authenticate against an PHPBB3 database. (info: https://modules.prosody.im/mod_auth_phpbb3)</flag>
	<flag name='auth_sql'>Allow client authentication to be handled by an SQL database query. (info: https://modules.prosody.im/mod_auth_sql)</flag>
	<flag name='auth_token'>This module enables Prosody to authenticate time-based one-time-pin (TOTP) HMAC tokens. (info: https://modules.prosody.im/mod_auth_token)</flag>
	<flag name='auth_wordpress'>This module allows you to authenticate against an Wordpress database. (info: https://modules.prosody.im/mod_auth_wordpress)</flag>
	<flag name='auto_accept_subscriptions'>In some environments where all users on the system have mutual trust in each other, it’s sometimes fine to skip the usual authorization process to add someone to your contact list and see their status. (info: https://modules.prosody.im/mod_auto_accept_subscriptions)</flag>
	<flag name='auto_activate_hosts'>By default Prosody does not automatically activate/deactivate hosts when they are added to and removed from the configuration. (info: https://modules.prosody.im/mod_auto_activate_hosts)</flag>
	<flag name='auto_answer_disco_info'>This module intercepts disco#info queries and checks if we already know the capabilities of this session, in which case we don’t transmit the iq and answer it ourselves. (info: https://modules.prosody.im/mod_auto_answer_disco_info)</flag>
	<flag name='benchmark_storage'>To benchmark <code>mod_storage_internal</code>: (info: https://modules.prosody.im/mod_benchmark_storage)</flag>
	<flag name='bidi'>This module implements <a href="http://xmpp.org/extensions/xep-0288.html">XEP-0288: Bidirectional Server-to-Server Connections</a>. It allows servers to use a single connection for sending stanzas to each other, instead of two connections (one for stanzas in each direction). (info: https://modules.prosody.im/mod_bidi)</flag>
	<flag name='block_outgoing'>This module blocks all outgoing stanzas from a list of users. (info: https://modules.prosody.im/mod_block_outgoing)</flag>
	<flag name='block_registrations'>On a server with public registration it is usually desirable to prevent registration of certain “reserved” accounts, such as “admin”. (info: https://modules.prosody.im/mod_block_registrations)</flag>
	<flag name='block_s2s_subscriptions'>No documentation yet :( (info: https://modules.prosody.im/mod_block_s2s_subscriptions)</flag>
	<flag name='block_strangers'>No documentation yet :( (info: https://modules.prosody.im/mod_block_strangers)</flag>
	<flag name='block_subscribes'>No documentation yet :( (info: https://modules.prosody.im/mod_block_subscribes)</flag>
	<flag name='block_subscriptions'>No documentation yet :( (info: https://modules.prosody.im/mod_block_subscriptions)</flag>
	<flag name='blocking'>Privacy lists are a widely implemented protocol for instructing your server on blocking communications with selected users and services. (info: https://modules.prosody.im/mod_blocking)</flag>
	<flag name='broadcast'>This module largely duplicates the functionality of the standard mod_announce that is included with Prosody. It was developed for compatibility with some clients (e.g. iChat) that do not support ad-hoc commands or sending to JIDs with the format ‘example.com/announce/online’. (info: https://modules.prosody.im/mod_broadcast)</flag>
	<flag name='c2s_conn_throttle'>This module allows to throttle those client connections which exceed a n*seconds limit. (info: https://modules.prosody.im/mod_c2s_conn_throttle)</flag>
	<flag name='c2s_limit_sessions'>This module lets you limit number of resources a user may connect. (info: https://modules.prosody.im/mod_c2s_limit_sessions)</flag>
	<flag name='cache_c2s_caps'>This module listens on presences containing caps (XEP-0115) and asks the client for the corresponding disco#info if it changed. (info: https://modules.prosody.im/mod_cache_c2s_caps)</flag>
	<flag name='candy'>This is a very simple demo module showing how to serve a BOSH-using web app from prosody. (info: https://modules.prosody.im/mod_candy)</flag>
	<flag name='captcha_registration'>Prosody-captcha is a little modification of prosody’s “mod_register.lua” module that provides captcha protection for registration form. (info: https://modules.prosody.im/mod_captcha_registration)</flag>
	<flag name='carbons'>This module implements <a href="http://xmpp.org/extensions/xep-0280.html">XEP-0280: Message Carbons</a>, allowing users to maintain a shared and synchronized view of all conversations across all their online clients and devices. (info: https://modules.prosody.im/mod_carbons)</flag>
	<flag name='carbons_adhoc'>No documentation yet :( (info: https://modules.prosody.im/mod_carbons_adhoc)</flag>
	<flag name='carbons_copies'>No documentation yet :( (info: https://modules.prosody.im/mod_carbons_copies)</flag>
	<flag name='checkcerts'>This module periodically checks your certificate to see if it is about to expire soon. The time before expiry is printed in the logs. About a week before a certificate expires, reminder messages will be sent to admins. (info: https://modules.prosody.im/mod_checkcerts)</flag>
	<flag name='client_certs'><a href="http://xmpp.org/extensions/xep-0257.html">XEP-0257</a> specifies a protocol for clients to store and manage client side certificates. When a client presents a stored client side certificate during the TLS handshake, it can log in without supplying a password (using SASL EXTERNAL). This makes it possible to have multiple devices accessing an account, without any of them needing to know the password, and makes it easier to revoke access for a single device. (info: https://modules.prosody.im/mod_client_certs)</flag>
	<flag name='client_proxy'>This module must be used as a component. For example: (info: https://modules.prosody.im/mod_client_proxy)</flag>
	<flag name='cloud_notify'>This is an implementation of the server bits of <a href="https://xmpp.org/extensions/xep-0357.html">XEP-0357: Push Notifications</a>. It allows clients to register an “app server” which is notified about new messages while the user is offline, disconnected or the session is hibernated by <a href="/mod_smacks.html">mod_smacks</a>. Implementation of the “app server” is not included<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>. (info: https://modules.prosody.im/mod_cloud_notify)</flag>
	<flag name='compact_resource'>No documentation yet :( (info: https://modules.prosody.im/mod_compact_resource)</flag>
	<flag name='compat_bind'>No documentation yet :( (info: https://modules.prosody.im/mod_compat_bind)</flag>
	<flag name='compat_dialback'>This module provides a workaround for servers that do not set the <code>to</code> attribute on stream headers, which is required per <a href="https://tools.ietf.org/html/rfc6120">RFC6120</a>: (info: https://modules.prosody.im/mod_compat_dialback)</flag>
	<flag name='compat_muc_admin'>Adds compatibility for old clients/libraries attempting to change affiliations and retrieve ’em sending the &lt; http://jabber.org/protocol/muc#owner &gt; xmlns instead of &lt; http://jabber.org/protocol/muc#admin &gt;. (info: https://modules.prosody.im/mod_compat_muc_admin)</flag>
	<flag name='compat_vcard'>No documentation yet :( (info: https://modules.prosody.im/mod_compat_vcard)</flag>
	<flag name='component_client'>This module turns Prosody hosts into components of other XMPP servers. (info: https://modules.prosody.im/mod_component_client)</flag>
	<flag name='component_http'>This module allows you to implement a component that speaks HTTP. Stanzas (such as messages) coming from XMPP are sent to a configurable URL as a HTTP POST. If the POST returns a response, that response is returned to the sender over XMPP. (info: https://modules.prosody.im/mod_component_http)</flag>
	<flag name='component_roundrobin'>This module enables multiple instances of external components to connect at the same time, and does round-robin load-balancing of incoming stanzas. (info: https://modules.prosody.im/mod_component_roundrobin)</flag>
	<flag name='compression_unsafe'><strong>NOTE:</strong> XMPP compression has unresolved <a href="https://mail.jabber.org/pipermail/standards/2014-October/029215.html">security concerns</a>, and this module has been removed from Prosody and renamed. (info: https://modules.prosody.im/mod_compression_unsafe)</flag>
	<flag name='conformance_restricted'>This module sends processing instructions, comments, DTDs and a non predefined entity (defined by the DTD) to the requesting entity. (info: https://modules.prosody.im/mod_conformance_restricted)</flag>
	<flag name='conversejs'>This module serves a small snippet of HTML that loads <a href="https://conversejs.org/">Converse.js</a>, configured to work with the VirtualHost that it is loaded onto. (info: https://modules.prosody.im/mod_conversejs)</flag>
	<flag name='couchdb'><em><strong>Note:</strong> This module needs updating to the 0.8 storage module API.</em> (info: https://modules.prosody.im/mod_couchdb)</flag>
	<flag name='csi'>This module implements <a href="http://xmpp.org/extensions/xep-0352.html">Client State Indication</a>, a way for mobile clients to tell the server that they are sitting in someones pocket and would rather not get some less urgent things pushed to it. (info: https://modules.prosody.im/mod_csi)</flag>
	<flag name='csi_battery_saver'>Please use this module instead of <a href="/mod_csi_pump.html">mod_csi_pump</a> if you want timestamping, properly handled carbon copies, support for handling encrypted messages and correctly handled smacks events. (info: https://modules.prosody.im/mod_csi_battery_saver)</flag>
	<flag name='csi_compat'>This module implements the google:queue protocol and maps it to <a href="https://modules.prosody.im/mod_csi.html">mod_csi</a> events. (info: https://modules.prosody.im/mod_csi_compat)</flag>
	<flag name='csi_pump'>Stanzas are queued in a buffer until either an “important” stanza is encountered or the buffer becomes full. Then all queued stanzas are sent at the same time. This way, nothing is lost or reordered while still allowing for power usage savings by not requiring mobile clients to bring up their radio for unimportant stanzas. (info: https://modules.prosody.im/mod_csi_pump)</flag>
	<flag name='data_access'>This module gives HTTP access to prosody’s storage mechanism. It uses normal HTTP verbs and <a href="http://tools.ietf.org/html/rfc2617">Basic HTTP authentication</a>, so you could call it RESTful if you like buzzwords. (info: https://modules.prosody.im/mod_data_access)</flag>
	<flag name='default_bookmarks'>This module allows you to add default bookmarks for users. It only kicks in when the user has no existing bookmarks, so users are free to add, change or remove them. (info: https://modules.prosody.im/mod_default_bookmarks)</flag>
	<flag name='default_vcard'>It is possible for the user to supply more than just a username and password when creating an account using <a href="https://prosody.im/doc/modules/mod_register">mod_register</a>. This module automatically copies over that data to the user’s vcard. (info: https://modules.prosody.im/mod_default_vcard)</flag>
	<flag name='delay'>This module adds “Delayed Delivery”-tags to every message stanza passing the server containing the current time on that server. (info: https://modules.prosody.im/mod_delay)</flag>
	<flag name='delegation'>Namespace Delegation is an extension which allows server to delegate some features handling to an entity/component. Typical use case is an external PEP service, but it can be used more generally when your preferred server lack one internal feature and you found an external component which can do it. (info: https://modules.prosody.im/mod_delegation)</flag>
	<flag name='deny_omemo'>No documentation yet :( (info: https://modules.prosody.im/mod_deny_omemo)</flag>
	<flag name='disable_tls'>This module can be used to prevent Prosody from offering TLS on client ports that you specify. This can be useful to work around buggy clients when transport security is not required. (info: https://modules.prosody.im/mod_disable_tls)</flag>
	<flag name='discoitems'>This Prosody plugin lets you manually override the service discovery items for a host. (info: https://modules.prosody.im/mod_discoitems)</flag>
	<flag name='dwd'>This module implements an optimization of the Dialback protocol, by skipping the dialback step for servers presenting a valid certificate. (info: https://modules.prosody.im/mod_dwd)</flag>
	<flag name='e2e_policy'>This module was written to encourage usage of End-to-end encryption for chat and MUC messages. It can be configured to warn the sender after every plaintext/unencrypted message or to block all plaintext/unencrypted messages. It also supports MUC and JID whitelisting, so administrators can for example whitelist public support MUCs ;-) (info: https://modules.prosody.im/mod_e2e_policy)</flag>
	<flag name='email_pass'>This module aims to help in the procedure of user password restoration. To start the restoration, the user must go to an URL provided by this module, fill the JID and email and submit the request. (info: https://modules.prosody.im/mod_email_pass)</flag>
	<flag name='extdisco'>This module adds support for <a href="https://xmpp.org/extensions/xep-0215.html">XEP-0215: External Service Discovery</a>, which lets Prosody advertise non-XMPP services. (info: https://modules.prosody.im/mod_extdisco)</flag>
	<flag name='fallback_vcard'>No documentation yet :( (info: https://modules.prosody.im/mod_fallback_vcard)</flag>
	<flag name='filter_chatstates'>Some mobile XMPP client developers consider <a href="http://xmpp.org/extensions/xep-0085.html">Chat State Notifications</a> to be a waste of power and bandwidth, especially when the user is not actively looking at their device. This module will filter them out while the session is considered inactive. It depends on <a href="/mod_csi.html">mod_csi</a> for deciding when to begin and end filtering. (info: https://modules.prosody.im/mod_filter_chatstates)</flag>
	<flag name='filter_words'>No documentation yet :( (info: https://modules.prosody.im/mod_filter_words)</flag>
	<flag name='firewall'><strong>Note:</strong> mod_firewall is in its very early stages. This documentation is liable to change, and some described functionality may be missing, incomplete or contain bugs. (info: https://modules.prosody.im/mod_firewall)</flag>
	<flag name='flash_policy'>This Prosody plugin adds support for flash socket policies. When connecting with a flash client (from a webpage, not an exe) to prosody the flash client requests for an xml “file” on port 584 or the connecting port (5222 in the case of default xmpp). Responding on port 584 is tricky because it requires root priviliges to set up a socket on a port &lt; 1024. (info: https://modules.prosody.im/mod_flash_policy)</flag>
	<flag name='graceful_shutdown'>This module is an experiment about a more graceful shutdown process. (info: https://modules.prosody.im/mod_graceful_shutdown)</flag>
	<flag name='group_bookmarks'><a href="http://prosody.im/doc/modules/mod_groups">mod_groups</a> allows you to insert contacts into users’ contact lists. Well mod_group_bookmarks allows you to insert chatrooms into the user’s bookmarks. These are fetched by their client and automatically joined when the log in. (info: https://modules.prosody.im/mod_group_bookmarks)</flag>
	<flag name='host_blacklist'>No documentation yet :( (info: https://modules.prosody.im/mod_host_blacklist)</flag>
	<flag name='host_guard'>As often it’s undesiderable to employ only whitelisting logics in public environments, this module let’s you more selectively restrict access to your hosts (component or server host) either disallowing access completely (with optional exceptions) or blacklisting certain sources. (info: https://modules.prosody.im/mod_host_guard)</flag>
	<flag name='host_status_check'>This module allows you to monitor the state of hosts and components in your Prosody server. For example, it will track whether components are connected and (if the component supports it) listen for heartbeats sent by the component to indicate that it is functioning. (info: https://modules.prosody.im/mod_host_status_check)</flag>
	<flag name='host_status_heartbeat'>This module integrates with <a href="/mod_host_status_check.html">mod_host_status_check</a> to provide heartbeats at regular intervals. (info: https://modules.prosody.im/mod_host_status_heartbeat)</flag>
	<flag name='http_altconnect'>No documentation yet :( (info: https://modules.prosody.im/mod_http_altconnect)</flag>
	<flag name='http_auth_check'>This module lets you test whether a set of credentials are valid, using Prosody’s configured authentication mechanism. (info: https://modules.prosody.im/mod_http_auth_check)</flag>
	<flag name='http_authentication'>This module enforces HTTP Basic authentication across all HTTP endpoints served by Prosody. (info: https://modules.prosody.im/mod_http_authentication)</flag>
	<flag name='http_avatar'>This module serves avatars from local users who have one set in their vCard, see XEP-0054 and XEP-0153. (info: https://modules.prosody.im/mod_http_avatar)</flag>
	<flag name='http_dir_listing'>This module generates directory listings when invoked by <code>mod_http_files</code>. See <a href="http://prosody.im/doc/modules/mod_http_files">documentation on <code>mod_http_files</code></a>. (info: https://modules.prosody.im/mod_http_dir_listing)</flag>
	<flag name='http_dir_listing2'>This module generates directory listings when invoked by <code>mod_http_files</code>. See <a href="http://prosody.im/doc/modules/mod_http_files">documentation on <code>mod_http_files</code></a>. (info: https://modules.prosody.im/mod_http_dir_listing2)</flag>
	<flag name='http_favicon'>This simple module serves a <code>favicon.ico</code> from prosodys HTTP server and nothing else. (info: https://modules.prosody.im/mod_http_favicon)</flag>
	<flag name='http_host_status_check'>This module exposes serves over HTTP the information collected by <a href="/mod_host_status_check.html">mod_host_status_check</a> and <a href="/mod_host_status_heartbeat.html">mod_host_status_heartbeat</a> in a convenient format for automated monitoring tools. (info: https://modules.prosody.im/mod_http_host_status_check)</flag>
	<flag name='http_hostaliases'>No documentation yet :( (info: https://modules.prosody.im/mod_http_hostaliases)</flag>
	<flag name='http_index'>This module produces a list of enabled HTTP “apps” exposed from Prosody at <code>http://example.org:5280/</code>, e.g. <a href="/mod_http_muc_log.html">mod_http_muc_log</a>, <a href="https://prosody.im/doc/modules/mod_http_files">mod_http_files</a> or <a href="/mod_admin_web.html">mod_admin_web</a>. If you think Prosodys default “root” web page (a 404 error usually) is boring, this might be the module for you! :) (info: https://modules.prosody.im/mod_http_index)</flag>
	<flag name='http_logging'>This module produces more detailed HTTP logs for Prosodys built-in HTTP server. The format is similar to that of Apache and go into Prosodys normal logs at the <code>info</code> level. (info: https://modules.prosody.im/mod_http_logging)</flag>
	<flag name='http_muc_log'>This module provides a built-in web interface to view chatroom logs stored by <a href="/mod_mam_muc.html">mod_mam_muc</a>. (info: https://modules.prosody.im/mod_http_muc_log)</flag>
	<flag name='http_rest'>This module provides a <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>ful method for sending XMPP stanzas. (info: https://modules.prosody.im/mod_http_rest)</flag>
	<flag name='http_roster_admin'><em>NOTE: THIS MODULE IS RELEASED UNDER THE MOZILLA PUBLIC LICENSE VERSION 2.</em> (info: https://modules.prosody.im/mod_http_roster_admin)</flag>
	<flag name='http_stats_stream'>This module provides a streaming interface to <a href="https://prosody.im/doc/statistics">Prosodys internal statistics</a> via <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">Server-sent events</a>. (info: https://modules.prosody.im/mod_http_stats_stream)</flag>
	<flag name='http_upload'>This module implements <a href="https://xmpp.org/extensions/xep-0363.html">XEP-0363</a>, versions 0.2 and 0.3, which let clients upload files over HTTP. (info: https://modules.prosody.im/mod_http_upload)</flag>
	<flag name='http_upload_external'>This module implements <a href="https://xmpp.org/extensions/xep-0363.html">XEP-0363</a>, which lets clients upload files over HTTP to an external web server. (info: https://modules.prosody.im/mod_http_upload_external)</flag>
	<flag name='http_user_count'>No documentation yet :( (info: https://modules.prosody.im/mod_http_user_count)</flag>
	<flag name='idlecompat'>This module adds <a href="http://xmpp.org/extensions/xep-0319.html">XEP-0319</a> idle tags to presence stanzas containing <a href="http://xmpp.org/extensions/xep-0012.html">XEP-0012: Last Activity</a> tags for idle indication (e.g. supported by libpurple clients). It works on outgoing and incoming presence stanzas. (info: https://modules.prosody.im/mod_idlecompat)</flag>
	<flag name='incidents_handling'>This module implements <a href="http://xmpp.org/extensions/xep-0268.html">XEP-268</a>. (info: https://modules.prosody.im/mod_incidents_handling)</flag>
	<flag name='inject_ecaps2'>This module injects ecaps2 elements in the presence once the legacy caps (XEP-0115) are received. (info: https://modules.prosody.im/mod_inject_ecaps2)</flag>
	<flag name='inotify_reload'>No documentation yet :( (info: https://modules.prosody.im/mod_inotify_reload)</flag>
	<flag name='invite'>This module allows users with an account to generate single-use invite URLs using an ad-hoc command. The invite URLs allow new users to create an account even if public registration is disabled. (info: https://modules.prosody.im/mod_invite)</flag>
	<flag name='ipcheck'>Sometimes for various reasons a client might want to know its IP address as it appears to the server. This <a href="http://xmpp.org/extensions/xep-0279.html">simple XEP</a> allows the client to ask the server for the IP address it is connected from. (info: https://modules.prosody.im/mod_ipcheck)</flag>
	<flag name='isolate_host'>In some environments it is desirable to isolate one or more hosts, and prevent communication with external, or even other internal domains. (info: https://modules.prosody.im/mod_isolate_host)</flag>
	<flag name='jid_prep'>This is a plugin that implements the JID prep protocol defined in <a href="http://xmpp.org/extensions/inbox/jidprep.html" class="uri">http://xmpp.org/extensions/inbox/jidprep.html</a> (info: https://modules.prosody.im/mod_jid_prep)</flag>
	<flag name='json_streams'>This plugin encodes XMPP as JSON. This is an implementation of <a href="http://xmpp.org/extensions/xep-0295.html">XEP-0295: JSON Encodings for XMPP</a>. (info: https://modules.prosody.im/mod_json_streams)</flag>
	<flag name='lastlog'>Simple module that stores the timestamp of when a user logs in. (info: https://modules.prosody.im/mod_lastlog)</flag>
	<flag name='latex'>This module intercepts messages between users and into chatrooms, and attaches a links to a rendered version of any <a href="http://en.wikipedia.org/wiki/LaTeX">LaTeX</a> in the message. This requires client support for <a href="http://xmpp.org/extensions/xep-0071.html">XHTML-IM</a>, and fetching images via HTTP. (info: https://modules.prosody.im/mod_latex)</flag>
	<flag name='lib_ldap'>This module is used by other modules to access an LDAP server. It’s pretty useless on its own; you should use it if you want to write your own LDAP-related module, or if you want to use one of mine (<a href="https://modules.prosody.im/mod_auth_ldap2.html">mod_auth_ldap2</a>, <a href="https://modules.prosody.im/mod_storage_ldap.html">mod_storage_ldap</a>). (info: https://modules.prosody.im/mod_lib_ldap)</flag>
	<flag name='limit_auth'>This module lets you put a per-IP limit on the number of failed authentication attempts. (info: https://modules.prosody.im/mod_limit_auth)</flag>
	<flag name='limits'>On some servers, especially public ones, it is desired to make sure that everyone gets their fair share of system resources (and no more). (info: https://modules.prosody.im/mod_limits)</flag>
	<flag name='list_active'>This module lists those users, who <strong>have</strong> used their account in a defined time-frame, basically the inverse of <a href="/mod_list_inactive.html">mod_list_inactive</a>. (info: https://modules.prosody.im/mod_list_active)</flag>
	<flag name='list_inactive'>This module lists those users, who haven’t used their account in a defined time-frame. (info: https://modules.prosody.im/mod_list_inactive)</flag>
	<flag name='listusers'>This module adds a command to <code>prosodyctl</code> for listing users. (info: https://modules.prosody.im/mod_listusers)</flag>
	<flag name='log_auth'>Prosody doesn’t write IP addresses to its log file by default for privacy reasons (unless debug logging is enabled). (info: https://modules.prosody.im/mod_log_auth)</flag>
	<flag name='log_events'>No documentation yet :( (info: https://modules.prosody.im/mod_log_events)</flag>
	<flag name='log_http'>This module logs <em>outgoing</em> requests that go via the internal net.http API. (info: https://modules.prosody.im/mod_log_http)</flag>
	<flag name='log_mark'>This module sends <code>-- MARK --</code> to the log once per minute. This may be useful to give a sense of how busy the server is or see that logging and timers are still working. (info: https://modules.prosody.im/mod_log_mark)</flag>
	<flag name='log_messages_sql'>This module logs messages to a SQL database. (info: https://modules.prosody.im/mod_log_messages_sql)</flag>
	<flag name='log_rate'>If you ever wanted to collect statistics on the number of log messages, this is the module for you! (info: https://modules.prosody.im/mod_log_rate)</flag>
	<flag name='log_sasl_mech'>No documentation yet :( (info: https://modules.prosody.im/mod_log_sasl_mech)</flag>
	<flag name='log_slow_events'>Most activities in Prosody take place within our built-in events framework, for example stanza processing and HTTP request handling, authentication, etc. (info: https://modules.prosody.im/mod_log_slow_events)</flag>
	<flag name='mam'>Implementation of <a href="https://xmpp.org/extensions/xep-0313.html">XEP-0313: Message Archive Management</a>. (info: https://modules.prosody.im/mod_mam)</flag>
	<flag name='mam_adhoc'>This module complements mod_mam by allowing clients to change archiving preferences through an Ad-hoc command. (info: https://modules.prosody.im/mod_mam_adhoc)</flag>
	<flag name='mam_archive'>Implementation of <a href="http://xmpp.org/extensions/xep-0136.html">XEP-0136: Message Archiving</a> for <a href="https://modules.prosody.im/mod_mam.html">mod_mam</a>. (info: https://modules.prosody.im/mod_mam_archive)</flag>
	<flag name='mam_muc'>This module logs the conversation of chatrooms running on the server to Prosody’s archive storage. To access them you will need a client with support for <a href="https://xmpp.org/extensions/xep-0313.html">XEP-0313: Message Archive Management</a> <strong>version 0.5</strong> or a module such as <a href="/mod_http_muc_log.html">mod_http_muc_log</a>. (info: https://modules.prosody.im/mod_mam_muc)</flag>
	<flag name='mamsub'>No documentation yet :( (info: https://modules.prosody.im/mod_mamsub)</flag>
	<flag name='manifesto'>This module informs users about the XMPP Test day and whether their contacts are affected. For mor info about the test day, see <a href="https://stpeter.im/journal/1496.html" class="uri">https://stpeter.im/journal/1496.html</a> (info: https://modules.prosody.im/mod_manifesto)</flag>
	<flag name='measure_client_identities'>This module measures the number of connected clients per identity. (info: https://modules.prosody.im/mod_measure_client_identities)</flag>
	<flag name='measure_client_presence'>This module measures the number of resources of a certain show (available, away, etc.) currently connected, and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_client_presence)</flag>
	<flag name='measure_cpu'>This module measures CPU usage and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_cpu)</flag>
	<flag name='measure_malloc'>This module collects stats from <code>util.pposix.meminfo</code> usage and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_malloc)</flag>
	<flag name='measure_memory'>This module measures memory usage and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_memory)</flag>
	<flag name='measure_message_e2ee'>This module measures the rate at which text messages are exchanged, and their encryption status. (info: https://modules.prosody.im/mod_measure_message_e2ee)</flag>
	<flag name='measure_message_length'>Simple module that collects statistics on message length in bytes, word count and line count. (info: https://modules.prosody.im/mod_measure_message_length)</flag>
	<flag name='measure_stanza_counts'>This module measures the number of stanzas handled and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_stanza_counts)</flag>
	<flag name='measure_storage'>This module collects statistics from storage operations. (info: https://modules.prosody.im/mod_measure_storage)</flag>
	<flag name='message_logging'>Often service administrators need to log their users’ messages for reasons such as auditing and compliance. This module simply logs user messages to simple text files, which can be easily searched, archived or removed on a regular basis. (info: https://modules.prosody.im/mod_message_logging)</flag>
	<flag name='migrate'>This module adds a command to <code>prosodyctl</code> for copying data between storage drivers. (info: https://modules.prosody.im/mod_migrate)</flag>
	<flag name='minimix'>Normally when joining a MUC groupchat, it is each individual client that joins. This means their presence in the group is tied to the session, which can be short-lived or unstable, especially in the case of mobile clients. (info: https://modules.prosody.im/mod_minimix)</flag>
	<flag name='motd_sequential'>mod_motd_sequential is a variant of <a href="https://prosody.im/doc/modules/mod_motd">mod_motd</a> that lets you specify a sequence of MOTD messages instead of a single static one. Each message is only sent once and the module keeps track of who as seen which message. (info: https://modules.prosody.im/mod_motd_sequential)</flag>
	<flag name='muc_access_control'>No documentation yet :( (info: https://modules.prosody.im/mod_muc_access_control)</flag>
	<flag name='muc_badge'>This module generates a badge for MUC rooms at a HTTP URL like <code>https://example.com:5281/muc_badge/room@conference.example.org</code> containing the number of occupants. (info: https://modules.prosody.im/mod_muc_badge)</flag>
	<flag name='muc_ban_ip'>One frequent complaint about XMPP chatrooms (MUCs) compared to IRC is the inability for a room admin to ban a user based on their IP address. This is because an XMPP user is not identified on the network by their IP address, only their JID. (info: https://modules.prosody.im/mod_muc_ban_ip)</flag>
	<flag name='muc_block_pm'>This module prevents unaffiliated users from sending private messages in chat rooms, unless someone with an affiliation (member, admin etc) messages them first. (info: https://modules.prosody.im/mod_muc_block_pm)</flag>
	<flag name='muc_config_restrict'>Sometimes, especially on public services, you may want to allow people to create their own rooms, but prevent some options from being modified by normal users. (info: https://modules.prosody.im/mod_muc_config_restrict)</flag>
	<flag name='muc_eventsource'>This module and its docs shamelessly forked from mod_pubsub_eventsource. (info: https://modules.prosody.im/mod_muc_eventsource)</flag>
	<flag name='muc_gc10'>Groupchat 1.0 was probably the protocol that predated <a href="https://xmpp.org/extensions/xep-0045.html">XEP-0045: Multi-User Chat</a> and there is still some compatibility that lives on, in the XEP and in implementations. (info: https://modules.prosody.im/mod_muc_gc10)</flag>
	<flag name='muc_intercom'>This module allows sending a message to another MUC room. (info: https://modules.prosody.im/mod_muc_intercom)</flag>
	<flag name='muc_lang'>This module adds support for advertising the language used in a room. (info: https://modules.prosody.im/mod_muc_lang)</flag>
	<flag name='muc_limits'>This module allows you to control the maximum rate of ‘events’ in a MUC room. This makes it useful to prevent room floods (whether malicious or accidental). (info: https://modules.prosody.im/mod_muc_limits)</flag>
	<flag name='muc_log'>This module logs the conversation of chatrooms running on the server to Prosody’s data store. To view them you will need a module such as <a href="https://modules.prosody.im/mod_muc_log_http.html">mod_muc_log_http</a>. (info: https://modules.prosody.im/mod_muc_log)</flag>
	<flag name='muc_log_http'>This module provides a built-in web interface to view chatroom logs stored by <a href="https://modules.prosody.im/mod_muc_log.html">mod_muc_log</a>. (info: https://modules.prosody.im/mod_muc_log_http)</flag>
	<flag name='muc_restrict_rooms'>This module allows disabling room creation based on regexp patterns defined in configuration. (info: https://modules.prosody.im/mod_muc_restrict_rooms)</flag>
	<flag name='munin'>This module implements the Munin reporting protocol, allowing you to collect statistics directly from Prosody into Munin. (info: https://modules.prosody.im/mod_munin)</flag>
	<flag name='net_dovecotauth'>mod_net_dovecotauth is a server implementation of the Dovecot authentication protocol. It allows you to authenticate e.g. Postfix against your Prosody installation. (info: https://modules.prosody.im/mod_net_dovecotauth)</flag>
	<flag name='net_proxy'>This module implements the PROXY protocol in versions 1 and 2, which fulfills the following usecase as described within the official protocol specifications: (info: https://modules.prosody.im/mod_net_proxy)</flag>
	<flag name='offline_email'>Quite often when I am out and about, I’m not able to connect to Jabber. It is usually much more likely I can access my email though (whether via the web, or a mobile client). (info: https://modules.prosody.im/mod_offline_email)</flag>
	<flag name='omemo_all_access'>Traditionally OMEMO encrypted messages could only be exchanged after gaining mutual presence subscription due to the OMEMO key material being stored in PEP. (info: https://modules.prosody.im/mod_omemo_all_access)</flag>
	<flag name='onhold'>Enable mod_onhold to allow temporarily placing messages from particular JIDs “on hold” – i.e. store them, but do not deliver them until the hold status is taken away. (info: https://modules.prosody.im/mod_onhold)</flag>
	<flag name='onions'>This plugin allows Prosody to connect to other servers that are running as a Tor hidden service. Running Prosody on a hidden service works without this module, this module is only necessary to allow Prosody to federate to hidden XMPP servers. (info: https://modules.prosody.im/mod_onions)</flag>
	<flag name='openid'><a href="http://openid.net/">OpenID</a> is an decentralized authentication mechanism for the Web. mod_openid turns Prosody into an OpenID <em>provider</em>, allowing users to use their Prosody credentials to authenticate with various third party websites. (info: https://modules.prosody.im/mod_openid)</flag>
	<flag name='password_policy'>No documentation yet :( (info: https://modules.prosody.im/mod_password_policy)</flag>
	<flag name='pastebin'>Pastebins are used very often in IM, especially in chat rooms. You have a long log or command output which you need to send to someone over IM, and don’t want to fill their message window with it. Put it on a pastebin site, and give them the URL instead, simple. (info: https://modules.prosody.im/mod_pastebin)</flag>
	<flag name='pep_vcard_avatar'>This module pushes the users nickname and avatar from vCards into PEP, or into vCards from PEP. This allows interop between older clients that use <a href="https://xmpp.org/extensions/xep-0153.html">XEP-0153: vCard-Based Avatars</a> to see the avatars of clients that use <a href="https://xmpp.org/extensions/xep-0084.html">XEP-0084: User Avatar</a> and vice versa. (info: https://modules.prosody.im/mod_pep_vcard_avatar)</flag>
	<flag name='pep_vcard_png_avatar'>Conversations (an XMPP client for Android) is publishing PEP avatars in the webp file format. However Pidgin and other XMPP desktop clients can only show vcard avatars, that are in the PNG file format. This module is the <a href="https://modules.prosody.im/mod_pep_vcard_avatar.html">mod_pep_vcard_avatar</a> module extended to also change the avatar file format to PNG. (info: https://modules.prosody.im/mod_pep_vcard_png_avatar)</flag>
	<flag name='persisthosts'>This module creates stub configuration files for newly activated hosts. (info: https://modules.prosody.im/mod_persisthosts)</flag>
	<flag name='pinger'>No documentation yet :( (info: https://modules.prosody.im/mod_pinger)</flag>
	<flag name='poke_strangers'>In order to build heuristics for which messages are spam, it is necessary to log as many details as possible about the spammers. This module sends a version and disco query whenever a message is received from a JID to a user it is not subscribed to. The results are printed to Prosody’s log file at the ‘info’ level. Queried full JIDs are not queried again until Prosody restarts. (info: https://modules.prosody.im/mod_poke_strangers)</flag>
	<flag name='post_msg'>Sometimes it’s useful to have different interfaces to access XMPP. (info: https://modules.prosody.im/mod_post_msg)</flag>
	<flag name='presence_cache'>This module stores a timestamp of the latest presence received from users contacts so that the client can see who is online faster when they sign in, and won’t have to wait for remote servers to reply. (info: https://modules.prosody.im/mod_presence_cache)</flag>
	<flag name='presence_dedup'>This module tries to squash incoming identical presence stanzas to save some bandwidth at the cost of increased memory use. (info: https://modules.prosody.im/mod_presence_dedup)</flag>
	<flag name='privacy_lists'>Privacy lists are a flexible method for blocking communications. (info: https://modules.prosody.im/mod_privacy_lists)</flag>
	<flag name='private_adhoc'>This is a very simple module which implements an adhoc commant toretrieves the users private XML data. (info: https://modules.prosody.im/mod_private_adhoc)</flag>
	<flag name='privilege'>Privileged Entity is an extension which allows entity/component to have privileged access to server (set/get roster, send message on behalf of server, access presence informations). It can be used to build services independently of server (e.g.: PEP service). (info: https://modules.prosody.im/mod_privilege)</flag>
	<flag name='proctitle'>This module sets the process name to <code>prosody</code> so it shows up as such instead of <code>lua</code> in process management tools. (info: https://modules.prosody.im/mod_proctitle)</flag>
	<flag name='profile'>This module provides a replacement for <a href="/mod_vcard.html">mod_vcard</a>. In addition to the ageing protocol defined by <a href="https://xmpp.org/extensions/xep-0054.html">XEP-0054</a>, it also supports the <a href="https://xmpp.org/extensions/xep-0292.html">new vCard 4 based protocol</a> and integrates with <a href="https://xmpp.org/extensions/xep-0163.html">Personal Eventing Protocol</a>. (info: https://modules.prosody.im/mod_profile)</flag>
	<flag name='prometheus'>This module implements the Prometheus reporting protocol, allowing you to collect statistics directly from Prosody into Prometheus. (info: https://modules.prosody.im/mod_prometheus)</flag>
	<flag name='proxy65_whitelist'>This module attempts to restrict use of non-whitelisted XEP-0065 proxies. (info: https://modules.prosody.im/mod_proxy65_whitelist)</flag>
	<flag name='pubsub_eventsource'><a href="https://en.wikipedia.org/wiki/Server-sent_events">Server-Sent Events</a> is a simple HTTP/line-based protocol supported in HTML5, making it easy to receive a stream of “events” in realtime using the Javascript <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource">EventSource API</a>. (info: https://modules.prosody.im/mod_pubsub_eventsource)</flag>
	<flag name='pubsub_feeds'>This module allows Prosody to fetch Atom and RSS feeds for you, and push new results to subscribers over XMPP. (info: https://modules.prosody.im/mod_pubsub_feeds)</flag>
	<flag name='pubsub_github'>This module accepts Github web hooks and publishes them to a local pubsub component for XMPP clients to subscribe to. (info: https://modules.prosody.im/mod_pubsub_github)</flag>
	<flag name='pubsub_hub'>This module implements a <a href="http://pubsubhubbub.github.io/PubSubHubbub/pubsubhubbub-core-0.3.html">PubSubHubbub</a> (PuSH) hub, allowing PuSH clients to subscribe to local XMPP <a href="http://xmpp.org/extensions/xep-0060.html">Publish-Subscribe</a> nodes stored by <a href="http://prosody.im/doc/modules/mod_pubsub">mod_pubsub</a> and receive real time updates to feeds. (info: https://modules.prosody.im/mod_pubsub_hub)</flag>
	<flag name='pubsub_mqtt'><a href="http://mqtt.org/">MQTT</a> is a lightweight binary pubsub protocol suited to embedded devices. This module provides a way for MQTT clients to connect to Prosody and publish or subscribe to local pubsub nodes. (info: https://modules.prosody.im/mod_pubsub_mqtt)</flag>
	<flag name='pubsub_pivotaltracker'>No documentation yet :( (info: https://modules.prosody.im/mod_pubsub_pivotaltracker)</flag>
	<flag name='pubsub_post'>Lets you easily publish data to PubSub using a HTTP POST request. The payload can be Atom feeds, arbitrary XML, or arbitrary JSON. The type should be indicated via the <code>Content-Type</code> header. (info: https://modules.prosody.im/mod_pubsub_post)</flag>
	<flag name='pubsub_stats'>This module publishes data from internal statistics into a PubSub node in <a href="https://xmpp.org/extensions/xep-0039.html">XEP-0039</a> format. (info: https://modules.prosody.im/mod_pubsub_stats)</flag>
	<flag name='pubsub_twitter'>Twitter has an open ‘realtime’ search API, but it requires polling (within their rate limits). This module allows Prosody to poll for you, and push new results to subscribers over XMPP. (info: https://modules.prosody.im/mod_pubsub_twitter)</flag>
	<flag name='query_client_ver'>This module sends a <a href="https://xmpp.org/extensions/xep-0092.html">version query</a> to clients when they connect, and logs the response, allowing statistics of client usage to be recorded. (info: https://modules.prosody.im/mod_query_client_ver)</flag>
	<flag name='rawdebug'>Sometimes it is useful to get the raw XML logs from clients for debugging purposes, but some clients don’t expose this. (info: https://modules.prosody.im/mod_rawdebug)</flag>
	<flag name='readonly'>No documentation yet :( (info: https://modules.prosody.im/mod_readonly)</flag>
	<flag name='register_dnsbl'>This module checks the IP addresses attempting to register an account against a DNSBL, blocking the attempt if there is a hit. (info: https://modules.prosody.im/mod_register_dnsbl)</flag>
	<flag name='register_dnsbl_firewall_mark'>No documentation yet :( (info: https://modules.prosody.im/mod_register_dnsbl_firewall_mark)</flag>
	<flag name='register_dnsbl_warn'>This module checks the IP address of newly registered users against a DNS block list. If a positive match is found, it gets logged. (info: https://modules.prosody.im/mod_register_dnsbl_warn)</flag>
	<flag name='register_json'>This module let’s you activate a httpserver interface to handle data from webforms with POST and Base64 encoded JSON. (info: https://modules.prosody.im/mod_register_json)</flag>
	<flag name='register_oob_url'>Registration redirect to out of band URL as described in <a href="http://xmpp.org/extensions/xep-0077.html#redirect">XEP-0077: In-Band Registration</a>. (info: https://modules.prosody.im/mod_register_oob_url)</flag>
	<flag name='register_redirect'>Registration Redirect as explained in the <a href="http://xmpp.org/extensions/xep-0077.html#redirect">IBR XEP</a>. (info: https://modules.prosody.im/mod_register_redirect)</flag>
	<flag name='register_web'>There are various reasons to prefer web registration instead of “in-band” account registration over XMPP. For example the lack of CAPTCHA support in clients and servers. (info: https://modules.prosody.im/mod_register_web)</flag>
	<flag name='reload_components'>This module allows to load/unload external components after they have been added/removed to a configuration file. It is necessary to explicitly initiate a reload on Prosody either via prosodyctl reload or config:reload(). (info: https://modules.prosody.im/mod_reload_components)</flag>
	<flag name='reload_modules'>By default Prosody does not reload modules at runtime unless instructed to via one of its admin interfaces. However sometimes you want to easily reload a module to apply new settings when the config changes. (info: https://modules.prosody.im/mod_reload_modules)</flag>
	<flag name='remote_roster'>This module adds support for <a href="https://xmpp.org/extensions/xep-0321.html">XEP-0321: Remote Roster Management</a> which is commonly used to allow components such as transports to modify the rosters of local users. (info: https://modules.prosody.im/mod_remote_roster)</flag>
	<flag name='require_otr'><a href="https://otr.cypherpunks.ca/">OTR, “Off The Record”</a>, encryption allows clients to encrypt messages such that the server cannot read/modify them. (info: https://modules.prosody.im/mod_require_otr)</flag>
	<flag name='roster_allinall'>This module is similar in purpouse to mod_groups, for when you want all users on the server to be in each others roster. (info: https://modules.prosody.im/mod_roster_allinall)</flag>
	<flag name='roster_command'>This module allows you to perform various actions on user rosters via prosodyctl. (info: https://modules.prosody.im/mod_roster_command)</flag>
	<flag name='s2s_auth_compat'>This module is a workaround for servers that try to do s2s authentication with certificates and SASL EXTERNAL, but do not send correct stream headers. Notably Openfire versions since 3.7 or 3.8. (info: https://modules.prosody.im/mod_s2s_auth_compat)</flag>
	<flag name='s2s_auth_dane'>This module implements DANE as described in <a href="http://tools.ietf.org/html/draft-miller-xmpp-dnssec-prooftype">Using DNS Security Extensions (DNSSEC) and DNS-based Authentication of Named Entities (DANE) as a Prooftype for XMPP Domain Name Associations</a>. (info: https://modules.prosody.im/mod_s2s_auth_dane)</flag>
	<flag name='s2s_auth_fingerprint'>This module allows you to manually pin certificate fingerprints of remote servers. (info: https://modules.prosody.im/mod_s2s_auth_fingerprint)</flag>
	<flag name='s2s_auth_monkeysphere'><a href="http://web.monkeysphere.info/">Monkeysphere</a> is a project aiming to introduce PGP’s web of trust to protocols such as SSH and TLS (which XMPP uses). (info: https://modules.prosody.im/mod_s2s_auth_monkeysphere)</flag>
	<flag name='s2s_auth_posh'><a href="https://tools.ietf.org/html/rfc7711">PKIX over Secure HTTP (POSH)</a> describes a method of securely delegating a domain to a hosting provider, without that hosting provider needing keys and certificates covering the hosted domain. (info: https://modules.prosody.im/mod_s2s_auth_posh)</flag>
	<flag name='s2s_auth_samecert'>No documentation yet :( (info: https://modules.prosody.im/mod_s2s_auth_samecert)</flag>
	<flag name='s2s_blacklist'>This module lets you block connections to remote servers at the s2s level. (info: https://modules.prosody.im/mod_s2s_blacklist)</flag>
	<flag name='s2s_idle_timeout'>Some people find it preferable to close server-to-server connections after they have been silent for a while. (info: https://modules.prosody.im/mod_s2s_idle_timeout)</flag>
	<flag name='s2s_keepalive'>This module periodically sends <a href="https://xmpp.org/extensions/xep-0199.html">XEP-0199</a> ping requests to remote servers to keep your connection alive. (info: https://modules.prosody.im/mod_s2s_keepalive)</flag>
	<flag name='s2s_keysize_policy'>This module sets the security status of s2s connections to invalid if their key is too small and their certificate was issued after 2014, per CA/B Forum guidelines. (info: https://modules.prosody.im/mod_s2s_keysize_policy)</flag>
	<flag name='s2s_log_certs'>This module produces info level log messages with the certificate status and fingerprint every time an s2s connection is established. It can also optionally store this in persistent storage. (info: https://modules.prosody.im/mod_s2s_log_certs)</flag>
	<flag name='s2s_never_encrypt_blacklist'>Let’s you stop Prosody from sending &lt;starttls xmlns=‘urn:ietf:params:xml:ns:xmpp-tls’&gt; feature to choppy/buggy servers which therefore would fail to re-negotiate and use a secure stream. (e.g. <a href="http://issues.igniterealtime.org/browse/OF-405">OpenFire 3.7.0</a>) (info: https://modules.prosody.im/mod_s2s_never_encrypt_blacklist)</flag>
	<flag name='s2s_reload_newcomponent'>Currently, module:reload command in console doesn’t load new components. This module will automatically load the new components (if any) when the config:reload command is run in the console. (info: https://modules.prosody.im/mod_s2s_reload_newcomponent)</flag>
	<flag name='s2s_whitelist'>This module lets you block connections to any remote servers not on a whitelist. (info: https://modules.prosody.im/mod_s2s_whitelist)</flag>
	<flag name='s2soutinjection'>This module is similar to <a href="/mod_srvinjection.html">mod_srvinjection</a> but less of an hack. (info: https://modules.prosody.im/mod_s2soutinjection)</flag>
	<flag name='sasl_oauthbearer'>This module adds a new SASL mechanism OAUTHBEARER, as defined in <a href="https://tools.ietf.org/html/rfc7628">RFC-7628</a>. (info: https://modules.prosody.im/mod_sasl_oauthbearer)</flag>
	<flag name='saslauth_muc'>No documentation yet :( (info: https://modules.prosody.im/mod_saslauth_muc)</flag>
	<flag name='saslname'>This module implements a manual method for advertsing the Kerberos principal name as per <a href="https://xmpp.org/extensions/xep-0233.html">XEP-0233</a>. It could be used in conjection with a Kerberos authentication module. (info: https://modules.prosody.im/mod_saslname)</flag>
	<flag name='seclabels'>This module implements <a href="https://xmpp.org/extensions/xep-0258.html">XEP-0258: Security Labels in XMPP</a>, but not actual policy enforcement. See for example <a href="/mod_firewall.html">mod_firewall</a> for that. (info: https://modules.prosody.im/mod_seclabels)</flag>
	<flag name='secure_interfaces'>Sometimes you might run clients without encryption on the same machine or LAN as Prosody - and you want Prosody to treat them as secure ( e.g. allowing plaintext authentication) even though they are not encrypted. (info: https://modules.prosody.im/mod_secure_interfaces)</flag>
	<flag name='server_status'>This module fetches the current status of configured hosts and/or stanza statistics from <a href="http://code.google.com/p/prosody-modules/wiki/mod_stanza_counter#">mod_stanza_counter</a>. And outputs it in either XML or JSON format. (info: https://modules.prosody.im/mod_server_status)</flag>
	<flag name='service_directories'>No documentation yet :( (info: https://modules.prosody.im/mod_service_directories)</flag>
	<flag name='sift'><a href="https://xmpp.org/extensions/xep-0273.html">SIFT</a> is a technology to allow clients to filter incoming traffic on the server. This helps save bandwidth, etc. (info: https://modules.prosody.im/mod_sift)</flag>
	<flag name='slack_webhooks'>This module provides a Slack-compatible “web hook” interface to Prosody MUCs. Both “incoming” web hooks, which allow Slack integrations to post messages to Prosody MUCs, and “outgoing” web hooks, which copy messages from Prosody MUCs to Slack-style integrations by HTTP, are supported. This can also be used, in conjunction with various Slack inter-namespace bridging tools, to provide a bidirectional bridge between a Prosody-hosted XMPP MUC and a Slack channel. (info: https://modules.prosody.im/mod_slack_webhooks)</flag>
	<flag name='smacks'>By default XMPP is as reliable as your network is. Unfortunately in some cases that is not very reliable - in some network conditions disconnects can be frequent and message loss can occur. (info: https://modules.prosody.im/mod_smacks)</flag>
	<flag name='smacks_noerror'>By default mod_smacks sends back error stanzas for every unacked message stanza when the hibernation times out. This leads to “message not delivered” errors displayed in clients. (info: https://modules.prosody.im/mod_smacks_noerror)</flag>
	<flag name='smacks_offline'>No documentation yet :( (info: https://modules.prosody.im/mod_smacks_offline)</flag>
	<flag name='sms_clickatell'>This module provides and SMS gateway component which uses the Clickatell HTTP API to deliver text messages. See clickatell.com for details on their services. Note that at present, this is entirely one way: replies will either go nowhere or as sms to the source number you specify. (info: https://modules.prosody.im/mod_sms_clickatell)</flag>
	<flag name='spam_reporting'>This module is a very basic implementation of <a href="https://xmpp.org/extensions/xep-0377.html">XEP-0377: Spam Reporting</a>. (info: https://modules.prosody.im/mod_spam_reporting)</flag>
	<flag name='srvinjection'>This Prosody plugin lets you manually override SRV records used for a remote host. (info: https://modules.prosody.im/mod_srvinjection)</flag>
	<flag name='sslv3_warn'>No documentation yet :( (info: https://modules.prosody.im/mod_sslv3_warn)</flag>
	<flag name='stanza_counter'>This module counts incoming and outgoing stanzas from when the instance started, and makes the data available to other modules by creating a global prosody. object (info: https://modules.prosody.im/mod_stanza_counter)</flag>
	<flag name='stanzadebug'>This module logs the full stanzas that are sent and received into debug logs, for debugging purposes. (info: https://modules.prosody.im/mod_stanzadebug)</flag>
	<flag name='statistics'>No documentation yet :( (info: https://modules.prosody.im/mod_statistics)</flag>
	<flag name='statistics_auth'>No documentation yet :( (info: https://modules.prosody.im/mod_statistics_auth)</flag>
	<flag name='statistics_cputotal'>No documentation yet :( (info: https://modules.prosody.im/mod_statistics_cputotal)</flag>
	<flag name='statistics_mem'>No documentation yet :( (info: https://modules.prosody.im/mod_statistics_mem)</flag>
	<flag name='statistics_statsd'>No documentation yet :( (info: https://modules.prosody.im/mod_statistics_statsd)</flag>
	<flag name='statistics_statsman'>A module providing a streaming statistics interface like <a href="/mod_statistics.html">mod_statistics</a> but based on the new <a href="https://prosody.im/doc/statistics">statistics API</a> introduced in Prosody 0.10. (info: https://modules.prosody.im/mod_statistics_statsman)</flag>
	<flag name='statsd'>No documentation yet :( (info: https://modules.prosody.im/mod_statsd)</flag>
	<flag name='storage_appendmap'>This is an experimental storage driver where changed data is appended. Data is simply written as <code>key = value</code> pairs to the end of the file. This allows changes to individual keys to be written without needing to write out the entire object again, but reads would grow gradually larger as it still needs to read old overwritten keys. This may be suitable for e.g. rosters where individual contacts are changed at a time. In theory, this could also allow rolling back changes. (info: https://modules.prosody.im/mod_storage_appendmap)</flag>
	<flag name='storage_ejabberdsql_readonly'>This is a storage backend using Ejabberd’s SQL backend. It depends on <a href="https://prosody.im/doc/depends#luadbi">LuaDBI</a> (info: https://modules.prosody.im/mod_storage_ejabberdsql_readonly)</flag>
	<flag name='storage_gdbm'>This is a storage module using GNU DBM as backend. It supports archives. (info: https://modules.prosody.im/mod_storage_gdbm)</flag>
	<flag name='storage_ldap'>See <a href="https://modules.prosody.im/mod_lib_ldap.html">mod_lib_ldap</a> for more information. (info: https://modules.prosody.im/mod_storage_ldap)</flag>
	<flag name='storage_lmdb'>This is a storage module using OpenLDAP Lightning Memory-Mapped Database as backend. (info: https://modules.prosody.im/mod_storage_lmdb)</flag>
	<flag name='storage_memory'>This module acts as a normal storage module for Prosody, but saves all data in memory only. All data is lost when the server stops. This makes it useful for testing, or certain specialized applications. (info: https://modules.prosody.im/mod_storage_memory)</flag>
	<flag name='storage_mongodb'>This is a storage backend that uses MongoDB. Depends on <a href="https://github.com/mwild1/luamongo">luamongo bindings</a> (info: https://modules.prosody.im/mod_storage_mongodb)</flag>
	<flag name='storage_muc_log'><a href="/mod_muc_log.html">mod_muc_log</a> provided logging of chatrooms running on the server to Prosody’s data store. This module gives access to this data using the 0.10+ stanza archive API, allowing legacy log data to be used with <a href="/mod_mam_muc.html">mod_mam_muc</a> and <a href="/mod_http_muc_log.html">mod_http_muc_log</a>. (info: https://modules.prosody.im/mod_storage_muc_log)</flag>
	<flag name='storage_muconference_readonly'>This is a storage backend using MU-Conference’s SQL storage. It depends on <a href="https://prosody.im/doc/depends#luadbi">LuaDBI</a> (info: https://modules.prosody.im/mod_storage_muconference_readonly)</flag>
	<flag name='storage_multi'>This module attemtps to provide a storage driver that is really multiple storage drivers. This could be used for storage error tolerance or caching of data in a faster storage driver. (info: https://modules.prosody.im/mod_storage_multi)</flag>
	<flag name='storage_xmlarchive'>This module implements stanza archives using files, similar to the default “internal” storage. (info: https://modules.prosody.im/mod_storage_xmlarchive)</flag>
	<flag name='streamstats'>No documentation yet :( (info: https://modules.prosody.im/mod_streamstats)</flag>
	<flag name='strict_https'>This module implements <a href="https://tools.ietf.org/html/rfc6797">HTTP Strict Transport Security</a> and responds to all non-HTTPS requests with a <code>301 Moved Permanently</code> redirect to the HTTPS equivalent of the path. (info: https://modules.prosody.im/mod_strict_https)</flag>
	<flag name='support_contact'>This Prosody plugin adds a default contact to newly registered accounts. (info: https://modules.prosody.im/mod_support_contact)</flag>
	<flag name='swedishchef'>This module does some conversions on message bodys passed through it causing them to look like our beloved swedish chef had typed them. (info: https://modules.prosody.im/mod_swedishchef)</flag>
	<flag name='tcpproxy'>It happens occasionally that I would like to use the XMPP server as a generic proxy for connecting to another service. It is especially awkward in some environments, and impossible in (for example) Javascript inside a web browser. (info: https://modules.prosody.im/mod_tcpproxy)</flag>
	<flag name='telnet_tlsinfo'>This module adds two commands to the telnet console, <code>c2s:showtls()</code> and <code>s2s:showtls()</code>. These commands shows TLS parameters, such as ciphers and key agreement protocols, of all c2s or s2s connections. (info: https://modules.prosody.im/mod_telnet_tlsinfo)</flag>
	<flag name='throttle_presence'>For most people ‘presence’ (status changes) of contacts make up most of the traffic received by their client. However much of the time it is not essential to have highly accurate presence information. (info: https://modules.prosody.im/mod_throttle_presence)</flag>
	<flag name='throttle_unsolicited'>This module limits the rate of outgoing unsolicited messages from local clients. Optionally, unsolicited messages coming in from remote servers may be limited per s2s conneciton. A message counts as “unsolicited” if the receiving user hasn’t added the sending user to their roster. (info: https://modules.prosody.im/mod_throttle_unsolicited)</flag>
	<flag name='tls_policy'>This module arose from discussions at the XMPP Summit about enforcing better ciphers in TLS. It may seem attractive to disallow some insecure ciphers or require forward secrecy, but doing this at the TLS level would the user with an unhelpful “Encryption failed” message. This module does this enforcing at the application level, allowing better error messages. (info: https://modules.prosody.im/mod_tls_policy)</flag>
	<flag name='traceback'>This module writes out a traceback to <code>traceback.txt</code> in Prosodys data directory (see <code>prosodyctl about</code>) when the signal <code>SIGUSR1</code> is received. This is useful when debugging seemingly frozen instances in case it is stuck in Lua code. (info: https://modules.prosody.im/mod_traceback)</flag>
	<flag name='track_muc_joins'>This module attempts to keep track of what MUC chat rooms users have joined. It’s not very useful on its own, but can be used by other modules to influence decisions. (info: https://modules.prosody.im/mod_track_muc_joins)</flag>
	<flag name='turncredentials'><a href="https://xmpp.org/extensions/xep-0215.html">XEP-0215</a> implementation for time-limited TURN credentials. (info: https://modules.prosody.im/mod_turncredentials)</flag>
	<flag name='twitter'>Twitter has simple API to use, so I tried to deal with it via Prosody. I didn’t manage to finish this module, but it is nice example of component that accepts registrations, unregistrations, does HTTP polling and so on. Maybe someone will finnish this idea. (info: https://modules.prosody.im/mod_twitter)</flag>
	<flag name='uptime_presence'>This module simply responds to a presence probe sent to the server with a presence staza containing a timestamp from when the server started. (info: https://modules.prosody.im/mod_uptime_presence)</flag>
	<flag name='vcard_command'>No documentation yet :( (info: https://modules.prosody.im/mod_vcard_command)</flag>
	<flag name='vcard_muc'>This module adds the ability to set vCard for MUC rooms. One of the most common use case is to be able to define an avatar for your own MUC room. (info: https://modules.prosody.im/mod_vcard_muc)</flag>
	<flag name='vjud'>Basic implementation of <a href="https://xmpp.org/extensions/xep-0055.html">XEP-0055: Jabber Search</a>. (info: https://modules.prosody.im/mod_vjud)</flag>
	<flag name='watchuntrusted'>Similar to mod_watchregistrations, this module warns admins when an s2s connection fails due for encryption or trust reasons. (info: https://modules.prosody.im/mod_watchuntrusted)</flag>
	<flag name='webpresence'>Quite often you may want to publish your Jabber status to your blog or website. mod_webpresence allows you to do exactly this. (info: https://modules.prosody.im/mod_webpresence)</flag>
	<flag name='xhtmlim'>This module attempts to sanitize XHTML-IM messages. (info: https://modules.prosody.im/mod_xhtmlim)</flag>

</use>
</pkgmetadata>
